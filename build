#!/bin/bash

# USAGE PRINTING
usage()
{
cat << EOF
usage: $0 options

OPTIONS:
   -h      display help
   -t      git tag [default: current commit]
   -i      install on terminal [default: false]
   -m      release or debug [default: debug]
   -u      upload to github [default: false]
EOF
}

# VAR INITIALIZATION
SCRIPT_BASE_DIR=$PWD
SMARTGEOMOBILE_VERSION=
SMARTGEOMOBILE_MODE="debug"
SMARTGEOMOBILE_INSTALL_FLAG=false
SMARTGEOMOBILE_UPLOAD_FLAG=false
SMARTGEOMOBILE_GRADLEW_COMMAND="../gradlew --continue --no-rebuild --parallel --quiet --stacktrace build"
SMARTGEOMOBILE_GITHUB_TOKEN="fe4aa1368f11241e5b50fae7f4fa279a15be40c4"
OUTPUT_DIRECTORY="$HOME/Desktop"

# ARGUMENTS PARSING
while getopts “t:m:h:i:u” OPTION
do
     case $OPTION in
         h)
             usage
             exit 1
             ;;
         t)
             SMARTGEOMOBILE_VERSION=$OPTARG
             ;;
         m)
             SMARTGEOMOBILE_MODE=$OPTARG
             ;;
         u)
             SMARTGEOMOBILE_UPLOAD_FLAG=true
             ;;
         i)
             SMARTGEOMOBILE_GRADLEW_COMMAND=$SMARTGEOMOBILE_GRADLEW_COMMAND" installDebug"
             ;;
         ?)
             usage
             exit
             ;;
     esac
done

if [[ -n $SMARTGEOMOBILE_VERSION ]]
then
    # CHECKOUT CODE IF VERSION PROVIDED
    echo "Récupération de la version $SMARTGEOMOBILE_VERSION"
    git checkout $SMARTGEOMOBILE_VERSION >> /dev/null
else
    # GET HASH IF NO VERSION PROVIDED
    echo "Récupération du hash de la version $SMARTGEOMOBILE_VERSION"
    SMARTGEOMOBILE_VERSION=$(git rev-parse HEAD) >> /dev/null
fi

# [ANDROID] CLEAN
echo "Nettoyage du projet Android"
rm ../platforms/android/content-shell/assets/gimap-mobile.zip  &> /dev/null
cd app/  >> /dev/null

# [ANDROID] ZIP APP/ FOLDER INTO GIMAP-MOBILE.ZIP FILE
echo "Compression du projet Android"
zip -r ../platforms/android/content-shell/assets/gimap-mobile.zip ./*  >> /dev/null
cd ../platforms/android/content-shell/  >> /dev/null

# [ANDROID] GENERATE APK FILE WITH GRADLE
echo "Génération de l'APK"
$SMARTGEOMOBILE_GRADLEW_COMMAND >> /dev/null

# [ANDROID] ZIP ALIGN IT
echo "Alignement de l'APK"
zipalign -f 4 "build/apk/content-shell-$SMARTGEOMOBILE_MODE-unaligned.apk" "$OUTPUT_DIRECTORY/smartgeomobile-$SMARTGEOMOBILE_VERSION.apk"  >> /dev/null

# [IOS] COPY FILE TO CORDOVA PROJECT
echo "Copie des fichiers pour iOS"
cd $SCRIPT_BASE_DIR
cp -R ./app/* platforms/ios/platforms/ios/www/  >> /dev/null
cd platforms/ios/platforms/ios/  >> /dev/null

# [IOS] BUILD SMARTGEO.APP
echo "Création de Smartgeo.app"
xcodebuild -xcconfig "$SCRIPT_BASE_DIR/platforms/ios/platforms/ios/cordova/build.xcconfig" -project "Smartgeo.xcodeproj" ARCHS="armv7 armv7s arm64" -target "Smartgeo" -configuration Release -sdk iphoneos build VALID_ARCHS="armv7 armv7s arm64" CONFIGURATION_BUILD_DIR="$SCRIPT_BASE_DIR/platforms/ios/platforms/ios/CordovaLib/build/Release-iphoneos/include/"  >> /dev/null

# ios-deploy -b $SCRIPT_BASE_DIR/platforms/ios/platforms/ios/CordovaLib/build/Release-iphoneos/include/Smartgeo.app

# [IOS] ARCHIVE AND SIGN SMARTGEO.APP TO *.IPA FILE
echo "Archivage et signature de l'*.ipa"
xcrun -sdk iphoneos PackageApplication -v "$SCRIPT_BASE_DIR/platforms/ios/platforms/ios/CordovaLib/build/Release-iphoneos/include/Smartgeo.app" -o "$OUTPUT_DIRECTORY/smartgeomobile-$SMARTGEOMOBILE_VERSION.ipa" --sign "iPhone Distribution" --embed "$SCRIPT_BASE_DIR/platforms/ios/Distrib_pp.mobileprovision"  >> /dev/null

# UPLOAD RELEASE TO GITHUB
if $SMARTGEOMOBILE_UPLOAD_FLAG
then
    # GO BACK TO INITIAL DIRECTORY
    cd $SCRIPT_BASE_DIR

    # CALL NODEJS SCRIPT FOR FETCHING GITHUB RELEASE ID
    SCRIPT_JS="var tag = '$SMARTGEOMOBILE_VERSION', token = '$SMARTGEOMOBILE_GITHUB_TOKEN',
        http = require('https'), body = '',
        options = { host: 'api.github.com', headers: { 'Authorization': 'token ' + token, 'user-agent': 'Smartgeo Builder/0.1.0'},
        path: '/repos/gismartwaredev/smartgeomobile/releases'};

    http.get(options, function(resp) {
        resp.setEncoding('utf8');
        resp.on('data',function(chunk){body += chunk;});
        resp.on('end' ,function() {
            body = JSON.parse(body);
            for (var i = 0; i < body.length; i++)
                if (body[i].tag_name === tag || body[i].tag_name === 'snapshot/'+tag)
                    return console.log(body[i].id);
            return ;
        });
    });"
    echo "Récupération de la release"
    SMARTGEOMOBILE_RELEASE_ID=$(echo $SCRIPT_JS | node)
    if [[ -z $SMARTGEOMOBILE_RELEASE_ID ]]
    then
        # IF NO RELEASE ID FOUND, EXIT
        echo "Release $SMARTGEOMOBILE_VERSION does not exists. Creating ..."
        curl -H "Authorization: token $SMARTGEOMOBILE_GITHUB_TOKEN" -i -X POST "https://api.github.com/repos/gismartwaredev/smartgeomobile/releases" --data '{
          "tag_name": "snapshot/'$SMARTGEOMOBILE_VERSION'",
          "target_commitish": "'$SMARTGEOMOBILE_VERSION'",
          "name": "smartgeomobile-snapshot-'$SMARTGEOMOBILE_VERSION'",
          "body": "smartgeomobile-snapshot-'$SMARTGEOMOBILE_VERSION'",
          "draft": false,
          "prerelease": true
        }'  >> /dev/null

        SMARTGEOMOBILE_RELEASE_ID=$(echo $SCRIPT_JS | node)
    fi

    # [IOS] UPLOAD IPA
    echo "Upload de l'IPA"
    curl -H "Authorization: token $SMARTGEOMOBILE_GITHUB_TOKEN" -i -X POST -H "Content-Type: application/vnd.android.package-archive"  --data-binary @$OUTPUT_DIRECTORY/smartgeomobile-$SMARTGEOMOBILE_VERSION.ipa  "https://uploads.github.com/repos/gismartwaredev/smartgeomobile/releases/$SMARTGEOMOBILE_RELEASE_ID/assets?name=smartgeomobile-$SMARTGEOMOBILE_VERSION.ipa"  >> /dev/null

    # [ANDROID] UPLOAD APK
    # echo "Upload de l'APK"
    # curl -H "Authorization: token $SMARTGEOMOBILE_GITHUB_TOKEN" -i -X POST -H "Content-Type: application/vnd.android.package-archive"  --data-binary @$OUTPUT_DIRECTORY/smartgeomobile-$SMARTGEOMOBILE_VERSION.apk  "https://uploads.github.com/repos/gismartwaredev/smartgeomobile/releases/$SMARTGEOMOBILE_RELEASE_ID/assets?name=smartgeomobile-$SMARTGEOMOBILE_VERSION.apk"  >> /dev/null

fi

git checkout -
